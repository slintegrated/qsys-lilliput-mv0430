-- Basic Framework Plugin
-- by QSC
-- October 2020

-- Information block for the plugin
PluginInfo = {
  Name = "Lilliput MV0430",
  Version = "0.1",
  BuildVersion = "0.1.0.0",
  Id = "322cb95e-a012-430e-aefb-03f5b8f9b7db",
  Author = "Gage Helton",
  Description = "Plugin to control functionality of Lilliput MV0430 multiviewer"  
}
LilliputCommands = {
  scanning = {
    command = 0xff,
    options = {}
  },
  reading_all_the_data = {
    command = 0x90,
    options = {{}}
  },
  rename_the_device = {
    command = 0x91,
    options = {},
  },
  output_resolution = {
    command = 0x92,
    options = {
      {0x00,"1080p60hz"}, --1 
      {0x01,"1080p50hz"}, --2 
      {0x02,"1080p30hz"}, --3 
      {0x03,"1080p25hz"}, --4
      {0x04,"1080p24hz"}, --5
      {0x05,"1080i60hz"}, --6
      {0x06,"1080i50hz"}, --7
      {0x07,"720p60hz"},  --8
      {0x08,"720p50hz"},  --9
      {0x09,"720p30hz"},  --10
      {0x0a,"720p25hz"}   --11
    },
  },
  border_enable = {
    command = 0xa4,
    options = {{0x00,"disable"},{0x01,"enable"}}
  },
  border_color = {
    command = 0x93,
    options = {},
  },
  output_layout = {
    command = 0x94,
    options = {
      {0x00,"quad"},                                                  --1
      {0x01,"2-3-4 on top | 1 on bottom"},                            --2
      {0x02,"1 on top | 2-3-4 on bottom"},                            --3
      {0x03,"1 on left | 2-3-4 on right"},                            --4
      {0x04,"2-3-4 on left | 1 on right"},                            --5
      {0x05,"1 fullscreen | 2 pip bottom left | 3 pip bottom right"}, --6
      {0x06,"1 top center | 2-3 side-by-side on bottom"},             --7
      {0x07,"1 fullscreen | 2 pip top right"},                        --8
      {0x08,"1 fullscreen | 2 pip top left"},                         --9
      {0x09,"1 fullscreen | 2 pip bottom left"},                      --10
      {0x0a,"1 fullscreen | 2 pip bottom right"},                     --11
      {0x0b,"1 on left | 2 on right"},                                --12
      {0x0c,"4 fullscreen"},                                          --13
      {0x0d,"3 fullscreen"},                                          --14
      {0x0e,"2 fullscreen"},                                          --15
      {0x0f,"1 fullscreen"}                                           --16
    },
  },
  umd_overlay_enable = {
    command = 0x95,
    options = {},
  },
  umd_position = {
    command = 0x96,
    options = {},
  },
  umd_character_color = {
    command = 0x97,
    options = {},
  },
  umd_background_color = {
    command = 0x98,
    options = {},
  },
  umd_text = {
    command = 0x99,
    options = {},
  },
  audio_meter_enable = {
    command = 0x9a,
    options = {},
  },
  audio_meter_position = {
    command = 0x9b,
    options = {},
  },
  audio_meter_channel = {
    command = 0x9e,
    options = {},
  },
  osd_enable = {
    comand = 0x9f,
    options = {},
  },
  osd_text_color = {
    command = 0xa0,
    options = {},
  },
  osd_background_color = {
    command = 0xa1,
    options = {},
  },
  osd_position = {
    command = 0xa2,
    options = {},
  },
  custom = {
    command = 0xa3,
    options = {},
  },
  size_of_character_overlay = {
    command = 0xa5,
    options = {},
  },
  reset = {
    command = 0xa6,
    options = {},
  },
  manual_setting_ip = {
    command = 0xa7, --this one will require extra work...
    options = {},
  }
}

function StringTrim(s)
  return s:match'^%s*(.*)'
end

function ByteLength(n)
  if(#n==1) then
    n = "0" .. n
  end
  return n
end

function CalculateChecksum(i)
  local quotient = math.floor(i / 0x100)
  local remainder = i % 0x100
  return ByteLength(string.format("%x",remainder)) .. " " .. ByteLength(string.format("%x",quotient))
end

function CalculateChecksumRaw(i)
  local quotient = math.floor(i / 0x100)
  local remainder = i % 0x100
  return {remainder,quotient}
end

function BuildCommand(c,o)
  --if using the names on the right as table indexes the for loop did not consisntely loop to the same keys with each pass!
  --therefore an index based table was used instead with each index being a data packet
  local packet_structure = {
    {0xa5,0x6C},                                    --packet_header
    {0x00,0x00},                                    --data_length
    {0xa3},                                         --device_type
    {0xff},                                         --device_id
    {0x01},                                         --interface_type
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, --reserve 
    {LilliputCommands[c].command},                  --command
    {LilliputCommands[c].options[o][1]},            --packet_data
    {0x00},                                         --checksum 
    {0xae},                                         --packet_end
  }

  local command_string = ""
  local data_length = 0
  local chksm = 0
  
  --create output string
  for k,v in pairs(packet_structure) do
    if(k==2) then --3rd and 4th bytes are data length - they're in the second section of bytes
      command_string = command_string .. " DATA_LENGTH 00"
      data_length = data_length + 2
    elseif (k==9) then
      command_string = command_string .. " CHECKSUM"
      data_length = data_length + 2
    else
      for i=1, #v do
        command_string = command_string .. " " .. ByteLength(string.format("%x",v[i]))
        data_length = data_length + 1
        if(k<10) then
          chksm = chksm + v[i]
        end
      end
    end
  end
  
  chksm = chksm + data_length
  
  command_string = command_string:gsub("DATA_LENGTH",ByteLength(string.format("%x",data_length)))
  command_string = command_string:gsub("CHECKSUM",CalculateChecksum(chksm))

  --packet_structure[2][1] = data_length
  --packet_structure[9] = CalculateChecksumRaw(chksm)

  return({StringTrim(command_string:gsub(" ","")),LilliputCommands[c].options[o][2]})

end

--x = (BuildCommand('reading_all_the_data',1))
--print(x[1] .. "\n" .. x[2])

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Lilliput MV0430" --  .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "Control", "Setup" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
  if props.Model ~= nil and props.Model.Value ~= "" then
    table.insert(model, { props.Model.Value } )
  else
    table.insert(model, { "MV0430" } )
  end
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, { 
    Name = "DeviceIp",
    ControlType = "Text",
    Count = 1,
    UserPin = false,
  })
  table.insert(ctrls, { 
    Name = "DevicePort",
    ControlType = "Text",
    Count = 1,
    UserPin = false,
    DefaultValue = "7000"
  })
  table.insert(ctrls, {
    Name = "Interface",
    ControlType = "Text",
    TextType = "List Box",
    Count = 1,
    UserPin = false,
    DefaultValue = "LAN A",
    Choices = {"LAN A","LAN B"}
  })
  
  table.insert(ctrls, { 
    Name = "QuadView",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
  })
  table.insert(ctrls, { 
    Name = "Input1",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
  })
  table.insert(ctrls, { 
    Name = "Input2",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
  })
  table.insert(ctrls, { 
    Name = "Input3",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
  })
  table.insert(ctrls, { 
    Name = "Input4",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    --Icon = "Power"
  })
  
  table.insert(ctrls, { 
    Name = "GetInfo",
    ControlType = "Button",
    ButtonType = "Momentary",
    Count = 1,
    UserPin = true,
    PinStyle = "Input",
    --Icon = "Power"
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  if CurrentPage == "Control" then
    table.insert(graphics,{
      Type = "GroupBox",
      Fill = {200,200,200},
      StrokeWidth = 1,
      Position = {5,5},
      Size = {200,500}
    })
    --[[table.insert(graphics,{
      Type = "Svg",
      Image = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMDAgMTAwIj4KICA8ZGVmcz4KICAgIDxzdHlsZT4KICAgICAgLmNscy0xIHsKICAgICAgICBmaWxsOiAjZmZmOwogICAgICB9CgogICAgICAuY2xzLTIgewogICAgICAgIGZpbGw6ICNmMmYyZjM7CiAgICAgICAgZm9udC1mYW1pbHk6IE15cmlhZFByby1SZWd1bGFyLCAnTXlyaWFkIFBybyc7CiAgICAgICAgZm9udC1zaXplOiAyNXB4OwogICAgICB9CgogICAgICAuY2xzLTMgewogICAgICAgIGZpbGw6ICMxOTE5MTk7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgPC9kZWZzPgogIDxnPgogICAgPHJlY3QgY2xhc3M9ImNscy0zIiB4PSIuMTMiIHk9Ii4xMiIgd2lkdGg9IjQ5Ljc1IiBoZWlnaHQ9IjQ5Ljc1Ii8+CiAgICA8cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Im00OS43NS4yNXY0OS41SC4yNVYuMjVoNDkuNW0uMjUtLjI1SDB2NTBoNTBWMGgwWiIvPgogIDwvZz4KICA8dGV4dCBjbGFzcz0iY2xzLTIiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDE4LjU5IDMyLjM0KSI+PHRzcGFuIHg9IjAiIHk9IjAiPjE8L3RzcGFuPjwvdGV4dD4KICA8Zz4KICAgIDxyZWN0IGNsYXNzPSJjbHMtMyIgeD0iNTAuMTIiIHk9Ii4xMyIgd2lkdGg9IjQ5Ljc1IiBoZWlnaHQ9IjQ5Ljc1Ii8+CiAgICA8cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Im05OS43NS4yNXY0OS41aC00OS41Vi4yNWg0OS41TTEwMCwwaC01MHY1MGg1MFYwaDBaIi8+CiAgPC9nPgogIDx0ZXh0IGNsYXNzPSJjbHMtMiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoNjguNTkgMzIuMzQpIj48dHNwYW4geD0iMCIgeT0iMCI+MjwvdHNwYW4+PC90ZXh0PgogIDxnPgogICAgPHJlY3QgY2xhc3M9ImNscy0zIiB4PSIuMTIiIHk9IjUwLjE5IiB3aWR0aD0iNDkuNzUiIGhlaWdodD0iNDkuNzUiLz4KICAgIDxwYXRoIGNsYXNzPSJjbHMtMSIgZD0ibTQ5Ljc1LDUwLjMxdjQ5LjVILjI1di00OS41aDQ5LjVtLjI1LS4yNUgwdjUwaDUwdi01MGgwWiIvPgogIDwvZz4KICA8dGV4dCBjbGFzcz0iY2xzLTIiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDE4LjU5IDgyLjQpIj48dHNwYW4geD0iMCIgeT0iMCI+MzwvdHNwYW4+PC90ZXh0PgogIDxnPgogICAgPHJlY3QgY2xhc3M9ImNscy0zIiB4PSI1MC4xMiIgeT0iNTAuMTkiIHdpZHRoPSI0OS43NSIgaGVpZ2h0PSI0OS43NSIvPgogICAgPHBhdGggY2xhc3M9ImNscy0xIiBkPSJtOTkuNzUsNTAuMzF2NDkuNWgtNDkuNXYtNDkuNWg0OS41bS4yNS0uMjVoLTUwdjUwaDUwdi01MGgwWiIvPgogIDwvZz4KICA8dGV4dCBjbGFzcz0iY2xzLTIiIHRyYW5zZm9ybT0idHJhbnNsYXRlKDY4LjU5IDgyLjQpIj48dHNwYW4geD0iMCIgeT0iMCI+NDwvdHNwYW4+PC90ZXh0Pgo8L3N2Zz4=",
      Position = {250,62},
      Size = {100,100},
    })]]
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Quad View",
      Position = {10,42},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout["QuadView"] = {
      PrettyName = "Buttons~Set Layout to Quad View",
      Style = "Button",
      Position = {105,42},
      Size = {50,16},
      Color = {0,0,0}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Input 1",
      Position = {10,62},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout["Input1"] = {
      PrettyName = "Buttons~Set Layout to Input 1",
      Style = "Button",
      Position = {105,62},
      Size = {50,16},
      Color = {0,0,0}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Input 2",
      Position = {10,82},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout["Input2"] = {
      PrettyName = "Buttons~Set Layout to Input 2",
      Style = "Button",
      Position = {105,82},
      Size = {50,16},
      Color = {0,0,0}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Input 3",
      Position = {10,102},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout["Input3"] = {
      PrettyName = "Buttons~Set Layout to Input 3",
      Style = "Button",
      Position = {105,102},
      Size = {50,16},
      Color = {0,0,0}
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Input 4",
      Position = {10,122},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout["Input4"] = {
      PrettyName = "Buttons~Set Layout to Input 4",
      Style = "Button",
      Position = {105,122},
      Size = {50,16},
      Color = {0,0,0}
    }
  
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Get Info",
      Position = {10,142},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout["GetInfo"] = {
      PrettyName = "Buttons~Get Device Info",
      Style = "Button",
      Position = {105,142},
      Size = {50,16},
      Color = {0,0,0}
    }
  
  
  
  elseif CurrentPage == "Setup" then
    table.insert(graphics,{
      Type = "GroupBox",
      Fill = {200,200,200},
      StrokeWidth = 1,
      Position = {5,5},
      Size = {200,500}
    })
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Interface",
      Position = {10,42},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout['Interface'] = {
      Style = "ListBox",
      Position = {105,42},
      Size = {82,16},
      Color = {0,0,0},
    }
  
    table.insert(graphics,{
      Type = "Text",
      Text = "Device IP",
      Position = {10,62},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout['DeviceIp'] = {
      Style = "Text",
      Position = {105,62},
      Size = {82,16},
      Color = {0,0,0},
    }
    table.insert(graphics,{
      Type = "Text",
      Text = "Device Port",
      Position = {10,82},
      Size = {90,16},
      FontSize = 14,
      HTextAlign = "Right"
    })
    layout['DevicePort'] = {
      Style = "Text",
      Position = {105,82},
      Size = {82,16},
      Color = {0,0,0},
    }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  function string.fromhex(str)
    return (str:gsub('..', function (cc)
        return string.char(tonumber(cc, 16))
    end))
  end
  
  function string.tohex(str)
    return (str:gsub('.', function (c)
        return string.format('%02X', string.byte(c))
    end))
  end
  
  function GetIp()
    local ni = Network.Interfaces()
  
    for _, item in ipairs(ni) do
      print(item.Interface)
      if(item.Interface == "LAN A" or item.Interface == "LAN B") then
          if(item.Interface == Controls.Interface.String) then
            print("Returning Address: " .. item.Address)
            return item.Address
          end
        else if(item.Interface == "Ethernet") then
          print("Returning Address: " .. item.Address)
          return item.Address
        end
      end
      --print("-"..item.Interface, " = \n IP ", item.Address,"\n MAC",item.MACAddress,"\n Broadcast",
      --item.BroadcastAddress,"\n Gateway",item.Gateway,"\n Netmask",item.Netmask)
    end
  end
  
  IPAddress = Controls.DeviceIp.String          -- Address of the UDP Communication target
  Port = tonumber(Controls.DevicePort.String)   -- Port used for sending UDP Datagrams
  LocalIPAddress = GetIp()                      -- Address of the Q-Sys Core
  LocalPort = 10001                             -- Socket to use on the Q-Sys Core for communication
  LocalNICName = "LAN A"                        -- Name of the Network Interface (NIC) to use on the Q-Sys Core
  MulticastAddress = "224.0.23.175"             -- Multicast address to subscribe to for UDP datagrams
  -- Sockets
  UDP = UdpSocket.New()  -- Create new UdpSocket object
  UDPSocketOpen = false
  -- Functions
  -- If a NIC is specified by name, bind LocalIPAddress to it
  function SelectNIC()  
    if LocalNICName ~= nil then
      -- Detect the local IP address of LAN A
      local nics = Network.Interfaces()
      for i,nic in ipairs(nics) do
        if nic.Interface == LocalNICName then
          LocalIPAddress = nic.Address
        end
      end
    end
  end
  -- When the UDP Socket is created run these setup functions
  function Connected()
    print("UDP Socket Opened")
    UDPSocketOpen = true
    
    -- Start any initial data requests or polling loops here
  end
  -- Wrapper for safely binding local address
  function OpenPorts(ip, port)
    UDP:Open(ip, port)
  end
  -- Opens a local UDP socket for use
  function OpenSocket()  
    -- If a local address has been chosen, open a UDP socket for use
    if LocalIPAddress ~= nil then
      print("Opening: " .. LocalIPAddress .. ":" .. LocalPort)
      -- pcall will prevent down interfaces from causing script errors
      local portGood, err = pcall(OpenPorts, LocalIPAddress, LocalPort)
      if not portGood then
        print("Error opening UDP Socket: " .. err)
      else
        Connected()
      end
    -- Let the core choose the address and port of the UDP socket automatically
    else
      OpenPorts(nil,nil)
      Connected()
    end
  end
  -- Join the open UDPSocket to a multicast network
  -- Datagrams on the address
  function JoinMulticast(address)
    if UDPSocketOpen then
      UDP:JoinMulticast(address)
    else
      print("Error joining multicast network: Local Socket Closed")
    end
  end
  -- Use the open UDPSocket to send a UDP datagram of the string (command) to the IPAddress and Port defined
  function Send(command)
    if UDPSocketOpen then
      print("Sending " .. IPAddress .. ":" .. Port .. " datagram: " .. command)  -- Print the command to be sent
      UDP:Send(IPAddress, Port, string.fromhex(command))  -- Write command to the UDP socket
    else
      --If the socket is closed, open it and try again
      OpenSocket()
      Send(command)
    end
  end
  -- Handle cleanup when closing the UDP port
  function Close()
    UDP:Close()
    UDPSocketOpen = false
    -- Stop any timers and clear data here
  end
  -- Parsers
  -- UDP Data event is called when data is received on the port, either targeted at the local address or from a multicast network.
  
  
  UDP.Data = function(socket, packet)
    print("Address: " .. packet.Address, "Port: " .. packet.Port, "Rx: " .. string.tohex(packet.Data))  -- Prints data on the UDP socket
    -- Handle response data here
  end
  --Setup the UDP sockets to be used 
  function Initialize()
    SelectNIC()                      -- Choose the correct NIC for communication
    OpenSocket()                     -- Create the local UDP Socket for use
    JoinMulticast(MulticastAddress)  -- Join the specified multicast 
  end
  -- Run at start
  Initialize()
  function DeviceSetup()
    print("setting up device")
    IPAddress = Controls.DeviceIp.String
    Port = tonumber(Controls.DevicePort.String)
  end
  
  Controls.DeviceIp.EventHandler = function()
    DeviceSetup()
  end
  
  Controls.DevicePort.EventHandler = function()
    DeviceSetup()
  end
  
  Controls.QuadView.EventHandler = function()
    local command = BuildCommand("output_layout",1)
    Send(command[1])
    print(command[2])
  end
  Controls.Input1.EventHandler = function()
    local command = BuildCommand("output_layout",16)
    Send(command[1])
    print(command[2])
  end
  Controls.Input2.EventHandler = function()
    local command = BuildCommand("output_layout",15)
    Send(command[1])
    print(command[2])
  end
  Controls.Input3.EventHandler = function()
    local command = BuildCommand("output_layout",14)
    Send(command[1])
    print(command[2])
  end
  Controls.Input4.EventHandler = function()
    local command = BuildCommand("output_layout",13)
    Send(command[1])
    print(command[2])
  end
  
  Controls.GetInfo.EventHandler = function()
    local command = BuildCommand("reading_all_the_data",1)
    Send(command[1])
    print(command[2])
  end
end
